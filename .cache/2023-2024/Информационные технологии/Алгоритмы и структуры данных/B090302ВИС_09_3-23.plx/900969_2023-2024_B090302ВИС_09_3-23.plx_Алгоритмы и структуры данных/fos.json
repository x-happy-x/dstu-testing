{"result": true, "message": null, "sysData": null, "data": {"commonState": {"hash": "KcYGAeE5sslSHQ8uBui4bA==", "hasChanges": false, "isEmpty": false, "app": {"version": "0.4.3.6"}}, "field1": "Контрольные вопросы для текущей аттестации:\r\n\r\n1 контрольная точка:\r\n\r\n1.\tПонятие алгоритма и его характерные черты. \r\n2.\tУточнение понятия алгоритма. \r\n3.\tАлгоритм как формальная математическая система. \r\n4.\tСвойства алгоритма и его характерные черты. \r\n5.\tФормы представления алгоритмов.\r\n6.\tЧастично рекурсивные и общерекурсивные функции. \r\n7.\tАбстрактные машины. \r\n8.\tСистема команд. \r\n9.\tПримеры схем ТМ. \r\n10.\tВычислимые по Тьюрингу функции. \r\n11.\tОсновная гипотеза теории алгоритмов. \r\n12.\tМТ и современные ЭВМ.\r\n13.\tТьюрингов подход к понятию «алгоритм». \r\n14.\tАлгоритмически разрешимые и неразрешимые проблемы.\r\n15.\tПроблемы распознавания: самоприменимости алгоритмов; применимости (или остановки) алгоритмов; нулевых функций; равенства двух вычислимых функций; общерекурсивных функций. \r\n16.\tРекурсивные функции. Формы рекурсивных алгоритмов. Виды рекурсий. Примеры рекурсивных функций.\r\n17.\tРекурсивная функция:  вычисление факториала.\r\n18.\tРекурсивная функция: вывод на печать символов строки в обратном порядке. \r\n19.\tРекурсивная функция: возведение числа в целую степень. \r\n20.\tРекурсивная функция:  печать числа в виде строки символов. \r\n21.\tРекурсивная функция: поиск наибольшего общего делителя (рекурсивная и итерационная функции).\r\n22.\tРекурсивная функция: вычисление чисел Фибоначчи. \r\n23.\tРекурсивная функция:  вычисление суммы элементов массива.\r\n24.\tМетоды теоретической оценки алгоритмов. Основные меры сложности вычисления. Ресурсы: память и время. Трудоемкость алгоритмов: налучший и наихудший случай, трудоемкость в среднем. \r\n25.\tАссимптотические оценки сложности: О(n), (n), (n). \r\n26.\tПолиномиальные и неполиномиальные алгоритмы. Суммы, их свойства. \r\n27.\tМетоды анализа алгоритмов.\r\n28.\tПриложения теории алгоритмов в информатике. Эффективность по быстродействию и занимаемой памяти. Практические критерии: средства реализации, поддерживаемые ЯП, простота. Роль оптимизации.\r\n29.\tМетоды сравнительной оценки алгоритмов. Сравнительная оценка скорости выполнения. \r\n30.\tСравнительная оценка реализации различных методов сортировок (метод пузырька, вставок, выбора, метод Шелли).\r\n31.\tСортировка включением. \r\n32.\tОбменная сортировка. \r\n33.\tСортировка выбором. \r\n34.\tСортировка разделением (Quicksort). \r\n35.\tСортировка со слиянием.\r\n\r\n2 контрольная точка:\r\n\r\n1.\tСравнение методов внутренней сортировки Прямое слияние. Естественное слияние. \r\n2.\tМетоды поиска в основной памяти. \r\n3.\tСбалансированное многопутевое слияние. \r\n4.\tМногофазная сортировка. \r\n5.\tУлучшение эффективности внешней.\r\n6.\tПонятие структуры.\r\n7.\tПонятия линейного списка. \r\n8.\tОпределение списка. \r\n9.\tВиды списков. Примеры.\r\n10.\tСтек. \r\n11.\tОсновные операции над элементами стека.\r\n12.\tОчередь. \r\n13.\tОсновные операции над элементами очереди.\r\n14.\tУпорядоченный список (односвязный, двусвязный). \r\n15.\tРеализация списков с использованием динамических структур. \r\n16.\tОсновные операции над списками: добавление, удаление, просмотр (чтение)элементов списка. \r\n17.\tПримеры использование динамических структур. \r\n18.\tОпределение дерева. \r\n19.\tПредставления деревьев. \r\n20.\tУпорядоченные деревья. \r\n21.\tБинарные деревья.  \r\n22.\tРеализация дерева с использованием динамических структур. \r\n23.\tОсновные операции для реализации дерева: добавление элемента или ветви дерева, прохождение дерева, удаление элемента или ветви дерева. \r\n24.\tТипы деревьев. \r\n25.\tПредставление списков в виде бинарных деревьев. Лес. \r\n26.\tАлгоритм Хаффмена. \r\n27.\tДеревья оптимального поиска. Деревья цифрового поиска\r\n28.\tМетоды хэширования для поиска в основной памяти. \r\n29.\tХеширование. Основные понятия. Хеш-таблица. Хеш-функция. Коллизия. \r\n30.\tМетоды разрешения коллизий. Преимущества и недостатки. \r\n31.\tХеширование. Метод цепочек (внешнее или открытое хеширование).\r\n32.\tХеширование. Метод открытой адресации (закрытое хеширование). \r\n33.\tАлгоритмы хеширования. Таблица прямого доступа. Метод остатков от деления. \r\n34.\tАлгоритмы хеширования. Таблица прямого доступа. \r\n35.\tАлгоритмы хеширования. Таблица прямого доступа. Метод функции середины квадрата. Метод свертки. \r\n36.\tХеширование. Использование цепочек переполнения.\r\n\r\nКонтрольные вопросы для промежуточной аттестации:\r\n\r\n1.\tПонятие алгоритма и его характерные черты. Уточнение понятия алгоритма. \r\n2.\tАлгоритм как формальная математическая система. Свойства алгоритма и его характерные черты. Формы представления алгоритмов.\r\n3.\tЧастично рекурсивные и общерекурсивные функции. \r\n4.\tАбстрактные машины. Система команд. Примеры схем ТМ. \r\n5.\tВычислимые по Тьюрингу функции. Основная гипотеза теории алгоритмов. МТ и современные ЭВМ.\r\n6.\tТьюрингов подход к понятию «алгоритм». Алгоритмически разрешимые и неразрешимые проблемы.\r\n7.\tПроблемы распознавания: самоприменимости алгоритмов; применимости (или остановки) алгоритмов; нулевых функций; равенства двух вычислимых функций; общерекурсивных функций. \r\n8.\tРекурсивные функции. Формы рекурсивных алгоритмов. Виды рекурсий. Примеры рекурсивных функций.\r\n9.\tРекурсивная функция:  вычисление факториала.\r\n10.\tРекурсивная функция: вывод на печать символов строки в обратном порядке. \r\n11.\tРекурсивная функция: возведение числа в целую степень. \r\n12.\tРекурсивная функция:  печать числа в виде строки символов. \r\n13.\tРекурсивная функция: поиск наибольшего общего делителя (рекурсивная и итерационная функции).\r\n14.\tРекурсивная функция: вычисление чисел Фибоначчи. \r\n15.\tРекурсивная функция:  вычисление суммы элементов массива.\r\n16.\tМетоды теоретической оценки алгоритмов. Основные меры сложности вычисления. Ресурсы: память и время. Трудоемкость алгоритмов: налучший и наихудший случай, трудоемкость в среднем. \r\n17.\tАссимптотические оценки сложности: О(n), (n), (n). Полиномиальные и неполиномиальные алгоритмы. Суммы, их свойства. Методы анализа алгоритмов.\r\n18.\tПриложения теории алгоритмов в информатике. Эффективность по быстродействию и занимаемой памяти. Практические критерии: средства реализации, поддерживаемые ЯП, простота. Роль оптимизации.\r\n19.\tМетоды сравнительной оценки алгоритмов. Сравнительная оценка скорости выполнения. \r\n20.\tСравнительная оценка реализации различных методов сортировок (метод пузырька, вставок, выбора, метод Шелли).\r\n21.\tСортировка включением. \r\n22.\tОбменная сортировка. \r\n23.\tСортировка выбором. \r\n24.\tСортировка разделением (Quicksort). \r\n25.\tСортировка со слиянием. \r\n26.\tСравнение методов внутренней сортировки Прямое слияние. Естественное слияние. \r\n27.\tМетоды поиска в основной памяти. Сбалансированное многопутевое слияние. \r\n28.\tМногофазная сортировка. Улучшение эффективности внешней.\r\n29.\tПонятие структуры. Понятия линейного списка. Определение списка. Виды списков. Примеры.\r\n30.\tСтек. Основные операции над элементами стека.\r\n31.\tОчередь. Основные операции над элементами очереди.\r\n32.\tУпорядоченный список (односвязный, двусвязный). Реализация списков с использованием динамических структур. Основные операции над списками: добавление, удаление, просмотр (чтение)элементов списка. \r\n33.\tПримеры использование динамических структур. \r\n34.\tОпределение дерева. Представления деревьев. Упорядоченные деревья. Бинарные деревья.  Реализация дерева с использованием динамических структур. \r\n35.\tОсновные операции для реализации дерева: добавление элемента или ветви дерева, прохождение дерева, удаление элемента или ветви дерева. \r\n36.\tТипы деревьев. Представление списков в виде бинарных деревьев. Лес. \r\n37.\tАлгоритм Хаффмена. \r\n38.\tДеревья оптимального поиска. Деревья цифрового поиска\r\n39.\tМетоды хэширования для поиска в основной памяти. \r\n40.\tХеширование. Основные понятия. Хеш-таблица. Хеш-функция. Коллизия. \r\n41.\tМетоды разрешения коллизий. Преимущества и недостатки. \r\n42.\tХеширование. Метод цепочек (внешнее или открытое хеширование).\r\n43.\t Хеширование. Метод открытой адресации (закрытое хеширование). \r\n44.\tАлгоритмы хеширования. Таблица прямого доступа. Метод остатков от деления. \r\n45.\tАлгоритмы хеширования. Таблица прямого доступа. \r\n46.\tАлгоритмы хеширования. Таблица прямого доступа. Метод функции середины квадрата. Метод свертки. \r\n47.\tХеширование. Использование цепочек переполнения.\r\n\r\nТиповые практические задания к промежуточной аттестации.\r\n\r\n1.\tПреобразовать программу «Массив»: считать из входного файла «in.txt», выполнить сортировку и записать в выходной файл «out.txt». Входной файл должен содержать информацию о количестве элементов массива и сами элементы массива. Выходной файл должен содержать результат сортировки\r\n2.\tОписать функцию сортировки (для всех рассмотренных в ходе обучения алгоритмов сортировки описать отдельные функции). Оценить эффективность выполненных сортировок\r\n3.\tСоздать стек на основе линейного списка\r\n4.\tС помощью typedef определить обозначения NODE и pNODE    соответственно для узла и указателя на нeго\r\n5.\tСоздать структурный тип Stack, описывающий cтек с двумя полями:  begin - указатель на первый элемент списка и len - количество элементов в списке.\r\n6.\tНаписать функцию для добавления нового элемента в стек void push (pSTACK pS, char ch)\r\n7.\tРеализовать стек списком\r\n8.\tСоздать простой упорядоченный по невозрастанию список неотрицательных целых чисел (Например, 12->10->9->7->3->NULL)\r\n9.\tРеализовать программу, выполняющую все основные операции с бинарным деревом\r\n10.\tСоставить хеш-таблицу, содержащую буквы и количество их вхождений во введенной строке. Вывести таблицу на экран. Осуществить поиск введенной буквы в хеш-таблице.\r\n", "field2": "Не предусмотрено ", "field3": "Комплект оценочных материалов по дисциплине прилагается", "field4": "1.Вопросы к промежуточной аттестации (Примерный список вопросов и структура экзаменационного задания; критерии оценивания) \r\n2. Вопросы для самоконтроля по темам/разделам дисциплины; критерии оценивания \r\n3. Лабораторные работы (Задания для лабораторных работ с указанием формы отчета обучающегося; контрольные вопросы к защите; критерии оценивания) \r\n4. Комплект тестовых заданий и критерии оценивания ", "field5": "https://skif.donstu.ru/test/course/view.php?id=3134", "metodRecomendationForControlWork": null, "metodRecomendationForKursRab": null, "controlForms": []}}